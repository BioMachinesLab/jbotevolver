package evolutionaryrobotics.mains;

import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;
import client.Client;
import com.panayotis.gnuplot.JavaPlot;
import com.panayotis.gnuplot.plot.DataSetPlot;
import com.panayotis.gnuplot.style.PlotStyle;
import com.panayotis.gnuplot.style.Style;
import comm.ClientPriority;
import evolutionaryrobotics.Main;
import evolutionaryrobotics.evaluationfunctions.TMazeEvaluationFunction;
import evolutionaryrobotics.neuralnetworks.Chromosome;
import evolutionaryrobotics.parallel.SlaveResult;
import evolutionaryrobotics.parallel.SlaveTaskStats;
import evolutionaryrobotics.populations.Population;
import factories.GuiFactory;
import factories.PopulationFactory;

public class StatsMain extends Main {
	
	public StatsMain(String[] cmdLineArgs) {
		
		//args example:
		//	dir=dir1/
		//	samples=100
		//	generation=10 (0 = latest generation)
		//	starttrial=1
		//	maxtrial=10 (if omitted, it'll go for every trial in the folder)
		
		String dir = "bigdisk/miguel/task3/cross_rooms_primitive/";
		int samples = 100;
		int generation = 0;
		int startTrial = 0;
		int maxTrial = 0;
		int fitnesssamples = 1;
		double targetfitness = 0;
		
		for(String s : cmdLineArgs) {
			String[] a = s.split("=");
			if(a[0].equals("dir")) dir = a[1];
			if(a[0].equals("samples")) samples = Integer.parseInt(a[1]);
			if(a[0].equals("generation")) generation = Integer.parseInt(a[1]);
			if(a[0].equals("starttrial")) startTrial = Integer.parseInt(a[1]);
			if(a[0].equals("maxtrial")) maxTrial = Integer.parseInt(a[1]);
			if(a[0].equals("fitnesssamples")) fitnesssamples = Integer.parseInt(a[1]);
			if(a[0].equals("targetfitness")) targetfitness = Double.parseDouble(a[1]);
		}
		
		if(startTrial == 0 && maxTrial == 0) {
			
			if(!dir.endsWith("/"))
				dir+="/";
			
			File subFolder;
			int currentFolder = 0;
			do {
				currentFolder++;
				subFolder = new File(dir+currentFolder);
			}while(subFolder.exists());
			
			startTrial = 1;
			maxTrial = --currentFolder;
		}
		
		String args="";
		//"String args="--population +stepsperrun=600";
		//args+="--controllers name=Behavior,	type=CTRNNMultilayer,	robotconfig=1,	hiddennodes=10,	inputs=(epuckir=(id=1),nearrobot=(id=3)),	outputs=(simple=(numberofoutputs=3)),	subcontrollers=(		goback=(			name=Behavior,			type=CTRNNMultilayer,			robotconfig=1,			hiddennodes=10,			inputs=(epuckir=(id=1)),			outputs=(simple=(numberofoutputs=3)),					weights=(1.0186857373517237,-7.475683599040901,-0.4405801663602631,-1.3383211673648836,0.36605074753342737,-1.4725349270331487,-3.1964130950325242,-6.442202232349752,-1.3470574837616127,-6.350548820261115,-1.8085622919149955,0.8439916962152452,1.0872771166000255,-2.625628212579953,-0.9023856106832596,-6.352699062113713,0.8225958361416228,-9.551495700294396,-3.037982492893332,-0.3015422918023814,0.15803511657796643,2.3855950779177926,-9.132388611819124,0.1920570155060468,-5.534369428343568,8.229571194740185,-2.6483392989073673,-9.268471026743297,-0.2934444822919336,1.2142066749695877,-7.5744190961145135,-6.934692524328595,-0.3151964746202238,-6.106833986331924,2.5317228989262146,3.1809511459788795,-7.844566541602759,2.603017437308979,3.9300965238961645,2.108271972584107,-2.1035697183644126,-4.857807416927509,-3.1715096288198543,1.4584762888130542,-2.5374012509042343,-4.689616713063325,3.7724426946901644,-7.249634891494593,-5.624414778370726,-10.0,-3.390022432117288,3.8542347899922142,-4.5793759610852485,-3.064035867549898,-1.7508826476147181,6.521152772264868,4.185895327998204,-2.723871619073064,0.3998504723007248,-1.9383610345020155,-7.061201469216554,2.2052463348438365,-4.23926316939738,-2.845006179555863,-2.0878626136082774,-4.044446028435798,-3.239021458094553,-1.3094402998113681,5.3216595760609415,1.4772707982198223,-2.0667201128341603,0.8201621571315405,-2.7314696064903874,-8.321425678549634,1.3326071643201265,-3.5601397385653,-1.5614087209275131,0.47146897260344306,-6.09326373927271,-0.7641814512147735,-0.8097037328664487,-6.362562051897353,0.5749761678927819,-0.9173963974170033,-4.383132131094809,2.770315846761898,-1.0830365045764998,-4.08468297950306,-0.4720145625674774,-2.7772288583190625,-6.077867423329266,-3.3806217257601183,3.587297920368622,-7.630300433581471,5.4116034676104094,0.06335984623673131,0.15970028391460755,-10.0,-4.984290757171224,-0.37138728125026355,0.5917392400397785,-0.029874519113911147,-1.7314513215415486,-2.0444408523835196,-6.828375558932857,-9.680932993050584,2.057449585436978,0.2902745997579167,-0.5893516132336778,-0.9502955548077974,7.568248020021569,-0.5534358806449735,3.1473355184521723,-4.689113695978695,-6.182789836562501,5.6824034401575885,3.4366914089512703,4.483511444392193,-5.305925775932317,4.184903398077745,1.691616722712368,1.5033500993599447,2.1470468657677033,-0.4564471539863838,-2.272384453818826,-8.01933960023024,-2.391247137015722,-0.02374105253348524,3.927050086859371,0.32583415568415575,3.759649183955654,-0.595789557969494,0.060403496086896824,-0.9099095574613901,-2.8842791259896594,5.911838068118133,0.4579455789317703,1.4989296128810605,-7.161200229465171,-0.2468962281239856,0.8302501979232912,-0.29686855708761173,0.9332173910914583,-1.207399997841522,-7.654212924702881,-4.8921649738789075,-2.079644722127696,3.751878789238153,-6.130517707500769,-2.375747502618644,1.9604966087074727,-1.8533480172389165,-7.064426135734538,-7.385048385189214,-1.9827106224114641,0.3262204905082349,-8.916219685413026,5.754107736406751,-0.8116607039273996,-3.3167022795135868,-6.361751893872746,-9.614016645237374,1.7812522358786023,-5.438142701971375,-5.03278644371958,-1.4585995180496716,8.05532043895285,-0.6370611202520291,-0.6177345908156732,-3.1084411920883,4.631680743186439,1.716464569864367,-3.2770844068826004,-5.578154781960215,4.2919949120990575,3.9025727888577366,0.6455241776560168,-3.769902847995919,-2.4648269417264617,-1.6959897795653263,-3.559135259879885,-8.001864402948584,-3.9786254703436335,-1.767930391690974,3.6470238399515913,-4.329238820591519,0.17603579419943396,-2.3977692638970853,-0.6166911166631428,10.0,-5.91192786730997,2.6565407048504692,-1.6338586300879028),					subcontrollers=(				corridor=(					name=CTRNNMultilayer,					robotconfigid=1,					hiddennodes=3,					inputs=(epuckir=(id=1)),					outputs=(twowheeloutput=(id=1,maxspeed=0.1,noiseoffset=0.05)),					weights=(1.3931838764842643,-0.662158666813073,-0.22055808482353467,-1.700309900372547,4.344124441923328,1.774700447827112,-3.124672431778498,-4.163406143909192,-5.04391721454275,1.180506399367846,-1.628215721803486,-7.085079020900242,-1.9259920244261264,0.7150466597208923,1.5673982919150689,3.4139319319518644,1.916857437914972,-2.4612825185605978,-3.5773908500586726,1.8102262948929364,-1.737470612855581,-5.835175168810551,-0.7690538897973358,2.4185237236260226,0.3613629442155276,-7.499579956048632,-7.868520858241885,1.5366341369291765,-7.054307713182831,3.438058023854003,-2.0479371562655113,6.227829333532279,5.52561171299704,4.083390243581929,0.8854571714904695)				),leftturn=(					name=CTRNNMultilayer,					robotconfigid=1,					hiddennodes=3,					inputs=(epuckir=(id=1)),					outputs=(twowheeloutput=(id=1,maxspeed=0.1,noiseoffset=0.05)),							weights=(-2.5208230611619475,1.7423071725264745,-0.4578519866873094,7.671178246654585,1.6038481639669129,2.300409369193382,-0.7211349237390821,-5.152462330382561,4.421619751922505,-1.4978353184114936,-2.967396648229604,5.631858632191838,-3.063698772420594,-3.973552833598986,0.1644079220070817,-1.467398305083888,-1.860975980866346,0.1647515637769515,1.0778673219304693,-0.3058579820968611,-4.856276889016559,0.6426719881994518,0.2102833957117533,0.10817207157788979,-3.3541497146366726,-0.5704548434538509,0.2034629114938285,2.8090822644015043,-2.4088774808721265,-5.12452519350807,-1.10220252709525,2.622858197363396,-2.4251307821132357,1.5648754436893701,0.9601105571627659)				),rightturn=(					name=CTRNNMultilayer,					robotconfigid=1,					hiddennodes=3,					inputs=(epuckir=(id=1)),					outputs=(twowheeloutput=(id=1,maxspeed=0.1,noiseoffset=0.05)),							weights=(-2.418097113842574,-3.5327347339525,-0.053595038902610914,-0.3219014741212832,-2.712600911691071,-3.674152786444435,-3.816762196089511,1.6957522705846952,-4.362566275897446,-5.271109651033521,0.8039192682592368,8.343706730082465,0.513679630474204,-1.3047178836944897,4.558885952013647,-1.0572316551790883,0.48921518546850207,-8.445137822011134,-4.283513585715793,-1.2973297632132899,2.2396199027822297,-2.203450664703018,-0.8794902114829515,0.37175954927925,0.9899890779151184,1.4450220826707958,-9.571404065982724,-0.5739501304552994,-7.109848723802777,10.0,1.8288754440138513,-4.479666846656912,-4.904083067322738,0.8239009742048082,3.467480546446145)				)			)		),		mazesolver=(			name=Behavior,			type=CTRNNMultilayer,			robotconfig=1,			hiddennodes=10,			inputs=(epuckir=(id=1),epucklight=(id=2)),			outputs=(simple=(numberofoutputs=3)),			weights=(-0.2505433184606599,3.941535096367384,-3.0513864955220966,-9.507409034778831,3.0153625704959692,5.208645262712128,-5.807039882608988,-9.887421870756253,2.163034551741939,7.211624361352463,3.6434964606184064,7.903929106395527,-1.3455034486309079,-1.382585934230583,9.005191278465139,5.851215327179221,-7.009861929150174,-7.46997748461848,-9.053820068465551,-0.1843338608589017,0.4183307395284871,0.37773510495563256,1.2742370785006758,10.0,-6.997156541075042,-6.063383541516718,2.363636754162827,10.0,-3.5610764070682492,2.3207127177169653,3.5746760864758707,-1.9315923431281237,-6.225960837568186,4.571197575960815,-10.0,10.0,0.1770224570597842,1.7793074834477136,0.4716026872133723,-9.732669881384949,-0.6773865238942662,5.718562982985292,7.436467238939731,-9.130885249604285,-4.4934982823178595,8.2966065019267,4.892746814957558,-7.428210458723997,-6.041680519764179,2.9979342906540936,4.418879106594531,-9.474407411856294,-10.0,2.937762960647118,-10.0,4.518969321272346,-5.827874150407942,8.734937788737405,-2.441698456702291,-10.0,7.2016499355182955,4.576355249503148,-0.43121682455629284,6.385341852914371,3.8491148418914247,-7.359698520325164,-9.816629574400498,2.2492308222643795,-0.4859509346105712,-4.183059911985497,-7.478810036999791,0.8300617172643595,2.0998299648528618,3.7923112682855424,1.822166883639719,-7.404756696968448,-3.120824836858366,-1.1235829021604615,-3.6439810223583704,-4.54162283355928,-5.109762194853648,-1.356467537455217,1.7247376052989405,-1.1977867130535587,-5.562368225743521,-9.962629945919543,-9.743580569578365,-7.3886260921296145,-0.2835364714938762,-0.1771070482168391,-5.642568252977139,-3.8015899574828538,-5.147394014521568,-2.211763369033861,-7.806628460287341,-0.5782947185230666,9.002749095935355,10.0,8.811141836533,-2.8316655093959793,3.2372630904102024,-4.412187135159652,-7.820692307322282,0.16434225720170859,5.344530767903438,-0.14751355020416426,6.326208456720717,-1.8735363273141157,-8.159729903178647,-2.8302038900062167,-5.53113011756468,3.816558124361022,10.0,-2.2306146032167797,-3.1152384429949587,8.916220081278851,-2.135687052246047,0.6721680229697251,9.016396484321726,-3.8967066705315028,-7.507489466186221,3.496464816150496,3.600238399562279,-0.8022934658909349,2.6956328518662915,-7.721992655200673,7.289895036188199,-1.8441460689932596,-5.297959423609112,-6.962471348314436,7.408701969558848,-0.46291934518044275,-5.7716385449313545,6.903069249342851,-8.467690206703702,3.1734373539055643,-1.3463347967711499,7.712973129529168,-7.605124394554907,5.752175981466745,3.069958425187658,-4.415320931432049,-2.3940460829967485,-2.337949296521847,9.639212461691793,-2.823650169092393,-2.17169167477351,-3.2515548049967307,3.500102270624252,-2.392715976241094,-6.8673868442168375,-1.3173056799782263,-5.368601099344248,-5.113129936130228,-6.0764113089127845,6.956711150356722,-0.17258500647575248,-0.948642916932215,1.5732818737925394,6.6038194487718265,-5.292259448480923,3.5335409040207666,-2.200518009856089,-3.2688021197635555,-5.825597935765702,-1.719247316338421,-0.5961180499274478,8.54865360350681,5.121987281352989,6.2210971128790575,0.7078390530895384,-0.10349351090698589,-4.969239331174703,2.727631847885355,0.8029328288146538,4.692131817866629,-0.4537736361063155,-3.6870413738442855,-6.136353244307258,4.125316364008834,-5.030182703412044,-8.895491817239543,7.189780153682421,2.1121089571209026,4.645999546967458,-1.3079086179695714,-0.8101944145933622,-4.310175889808228,-0.6159319750056268,-5.8799611324358425,7.563710835988379,-5.14957089351774,7.85889341853813,2.749515759811172,-6.5728942072653,-3.513639350140358,-4.318400602728214,1.2255720214418673,-1.2653335997965678,-8.859238435615138,2.8811237621572485,0.5730828405400206,-1.3036787628882935,-2.1688450365623084,-8.81640174276191,1.7409182211842467,-4.758742575252535,8.001701152028291,-9.791411905237496,1.774106455688799,5.776987232504233,-0.4615526382493427,1.2774744486492104),			subcontrollers=(				corridor=(					name=CTRNNMultilayer,					robotconfigid=1,					hiddennodes=3,					inputs=(epuckir=(id=1)),					outputs=(twowheeloutput=(id=1,maxspeed=0.1,noiseoffset=0.05)),								weights=(1.3931838764842643,-0.662158666813073,-0.22055808482353467,-1.700309900372547,4.344124441923328,1.774700447827112,-3.124672431778498,-4.163406143909192,-5.04391721454275,1.180506399367846,-1.628215721803486,-7.085079020900242,-1.9259920244261264,0.7150466597208923,1.5673982919150689,3.4139319319518644,1.916857437914972,-2.4612825185605978,-3.5773908500586726,1.8102262948929364,-1.737470612855581,-5.835175168810551,-0.7690538897973358,2.4185237236260226,0.3613629442155276,-7.499579956048632,-7.868520858241885,1.5366341369291765,-7.054307713182831,3.438058023854003,-2.0479371562655113,6.227829333532279,5.52561171299704,4.083390243581929,0.8854571714904695)				),leftturn=(					name=CTRNNMultilayer,					robotconfigid=1,					hiddennodes=3,					inputs=(epuckir=(id=1)),					outputs=(twowheeloutput=(id=1,maxspeed=0.1,noiseoffset=0.05)),					weights=(-10.0,-1.5138360633818433,4.812784658125189,0.628626298245273,-1.392739351656052,2.204949803338166,2.1893603471580056,-3.874193744951935,-0.46530733795919454,-2.8649578663501614,-1.5525313167456494,7.556059326636025,-5.395169797114264,-2.6484023405976513,-1.1802076939309494,0.6669242355774452,-3.069888261057363,-3.3721338849745037,-1.5307468013794745,0.3631097101122007,-1.9455542966920658,2.0975787003526496,0.575577939604369,0.6695254392350463,-6.175787439275344,-0.3251295273442864,-0.6866811310051718,2.8160847572859975,0.020134289446330417,-5.155047319264084,-1.4150999388009227,3.8711428295307417,-2.6706790676535976,1.7917386541869815,1.6138690292266964)				),rightturn=(					name=CTRNNMultilayer,					robotconfigid=1,					hiddennodes=3,					inputs=(epuckir=(id=1)),					outputs=(twowheeloutput=(id=1,maxspeed=0.1,noiseoffset=0.05)),					weights=(7.338012892202027,1.597758393585973,-1.127305669248038,-8.27132465795543,0.09747153626833327,0.9361900779636118,-1.2659085769295841,-7.988743905888024,-1.0683742177353568,-7.834418744554379,-4.992942150330769,3.413000876714337,-1.5972427809544298,-3.627224837599516,-0.9805547991130701,-1.5533266711738065,-5.347466568523778,-7.488005016909013,-0.2315047641679191,-0.9736021723428493,2.5149100355504985,0.49133889519526447,-1.1020590921087776,-1.3394961235586103,-7.247604885321283,0.31827079655434387,1.2702552558727482,-6.949814305072898,-0.5866030292265878,1.8851937887093175,5.793167194195193,-7.808301513510769,-3.4468098249074512,4.792620529505539,-0.3271838483561609)				)			)		),		roomsolver=(			name=CTRNNMultilayer,			robotconfigid=1,			hiddennodes=10,			inputs=(epuckir=(id=1)),			outputs=(twowheeloutput=(id=1,maxspeed=0.1,noiseoffset=0.05)),			weights=(-5.525100954244705,-1.6893261210645187,-10.0,-9.896489687270972,-9.81085737506878,-5.603334947273111,-1.6429460859338725,-8.2722807761694,0.6826203291486785,-9.70330240228598,-6.763416597667966,-10.0,10.0,1.4016331310235872,-3.2633762884341895,-2.193564846126849,7.114735863816099,4.098631661525305,-4.946757429936727,-4.101808919906124,-6.815158997548236,-4.037138702906047,-9.021465123350751,-0.02622248656866155,-0.9477142154158973,-1.2121379852701937,6.106339777957847,0.6626816479737457,-8.160882294113318,0.7307925097867851,-0.2300323467105363,-10.0,-0.3916368063124396,-8.0624477120217,-9.88425403661044,-3.157166197375223,-7.270460388301203,-1.5611359363124442,2.9139272266677643,2.2099383918450135,1.3010620106510462,-0.7432617767346708,-5.079345210144353,-2.9074293211868123,-5.101831657760675,-9.42948161641596,2.303466929357385,-0.42641725205441783,0.24556164096261757,2.993680455189619,8.77190699120042,2.2871960748684836,4.864082128680955,-2.6405888222085845,-9.751760044772995,5.008601852865861,-0.6584707792867246,-7.41091125204077,0.9196771252377433,-2.655033679962556,-10.0,3.8045219672535424,-9.867734507648546,-1.632890091640667,-8.127174800913446,3.499101184509453,6.616103838810635,10.0,10.0,-0.18023995191744913,-0.8892418994590103,-9.611536408830789,-0.03655425957301173,2.7593317800436123,-1.3993302769300318,-7.647902449744057,-9.715112367333916,0.49310660605804824,3.6079459328398134,-2.6054951269930986,2.0157235099441926,1.0617080446351355,2.7948444888367976,-1.8830277413670218,-1.1649106219553782,3.972156779397609,-8.131581441243604,4.526344150542626,3.025346552194463,0.9441806488828242,-8.494739033831818,-1.999072465157787,2.3552931604237584,5.572977802951974,-8.485212175833666,1.2883716495165416,-6.943075778963227,1.261416163839461,-9.129589142662004,8.198589438264124,8.530118872397216,2.2561900706623175,7.07332847983903,5.2990217971772875,7.789361272129175,5.586330246883979,-5.913012097295157,-4.361132550082118,-0.8238818034020647,-6.839611315766446,1.0009262396160186,-3.5821946793978032,-2.4464233880949773,5.465262275441046,0.3041388185524867,1.3272875861917068,2.6885547087305137,-1.098814765937639,3.983967875064321,-5.216643324980139,7.450691200042177,1.8930601275938488,-1.1375440087427022,0.10893929015393677,-4.23921122010767,-2.357632768482328,0.10506713200026746,-1.7486154513210184,-4.263298475290078,-2.9694291150825247,4.744420736119903,2.1133022761013702,-8.381733504589812,-7.4388388209092335,-8.533200158047732,-0.1146123311245818,-3.4026779027082217,-3.377960988496421,3.7644098784390554,-1.9912592471906052,-1.117963111666132,-6.099490747143371,-5.419607635547252,-1.0584521359540093,1.3911091917927305,-3.9877221311565245,-4.59918548748383,-0.2834907762323215,-6.784198589305898,-7.906148215655987,-4.791579038363584,2.565742077456826,-5.412257871612924,-8.42740186256726,5.681992310572907,-5.5231562068119935,-5.545549949100598,-4.859175616668336,-7.101916408841148,1.9263784104077801,-3.2999597168977184,-5.509155508070325,-4.85796663318654,-9.30847654648609,-0.33002330753441717,10.0,3.6457363381137524,-1.9339403067853378,8.911483131610552,-3.5793522032421636,1.81906453064986,-1.989469214069249,-6.318499979374832,-3.519109741036207,-0.9286048943519303,2.2945221372813243,-1.0496364614889873,5.162201126442645,0.8030282150545522,-1.1944909406048303,1.7719167898036543,-0.33413759590941305)		)	)";
		//args+="\n --evaluation +name=roommazeback,maxsteps=10000 \n --population +stepsperrun=10000 \n --robots +sensors=(epuckirsensor=(id=1,angle=90,numberofsensors=4,newmode=1,fixedsensor=1,offsetnoise=0.05,numberofrays=7),epucklightsensor=(id=2,numbersensors=2,orientation=0,angle=45,range=0.5,fixedvalue=15),nearrobot=(id=3,range=0.40)),randomizex=0.45,randomizey=0.25 \n --environment +objects=2 \n ";
		//"--controllers name=Behavior,type=CTRNNMultilayer,robotconfig=1,hiddennodes=10,inputs=(epuckir=(id=1),nearrobot=(id=3)),outputs=(simple=(numberofoutputs=3)),subcontrollers=(goback=(name=Behavior,type=CTRNNMultilayer,robotconfig=1,hiddennodes=10,inputs=(epuckir=(id=1)),outputs=(simple=(numberofoutputs=3)),weights=(-7.422324618208607,-5.585952538784439,3.702993349522069,4.57202131158806,-0.4725675868084225,-3.767546293389906,10.0,3.6019072523499647,-9.239575113395842,-10.0,-1.5529616530574843,-0.6341195311798512,-5.902451054137027,1.8166071889414872,5.912312760810051,-9.784840375517733,5.6606884287954,-10.0,5.141338601109239,-1.0519848574858677,-6.708137125952183,-10.0,9.71283873442921,1.9392370535560448,-8.744231526095724,-6.421069419971184,-7.071728324153054,-4.321029145426027,-0.5387436199750996,-6.554660077924556,-0.2034839626560661,2.631656457042586,2.284086333090798,0.36605527902566787,-8.068524165937161,-1.935640387018621,-8.127120761245934,3.5190286942098963,-2.120306096807445,-3.628616830127078,-6.330281266832167,-10.0,-8.587475387468217,-5.228634680493082,4.247785866836676,-7.070018177692391,8.601326229206244,5.88261127456458,-5.959658423964855,-7.879722511674661,3.4637892392259713,4.908573837860192,-1.666696787677421,-7.738527710846526,-10.0,-8.77882425172421,-0.22064857407909919,2.37266977168711,-7.790530086574,-7.00552649034346,-8.226155081547418,-1.654805057019155,1.121810130315248,-7.021916112245642,-6.051478514086037,-0.0037720765101142417,-9.83411620623246,-0.9624593030987258,9.718879863600824,-4.6754082773298276,-5.56610753245302,-9.652804546713686,-7.414894093122141,-2.8723645940149614,-4.65422405946212,-7.4902701089984305,-0.9343231379441419,-3.913385535328592,-4.744691343194182,5.220852705661434,-7.376770610684122,-10.0,-7.489348569091631,-5.7506376085756665,-0.8697041712225994,-5.270367477418733,4.112614700062981,-10.0,2.3926897169460632,3.69359482059948,7.474296969948377,-4.184515606438538,7.911615159100733,3.6934186597265275,5.695944216315625,-9.198544793049576,-5.249640282442133,-6.024789113047597,-6.655587713095812,-10.0,-5.8509521782369065,4.546181707365229,-8.149678174423322,-7.847281414267762,3.880817247396644,-6.310592574699822,-2.1255397240926452,-0.13216079452029406,-6.1183581077166975,6.554447290533963,-6.879836016748209,10.0,3.844517383515141,8.220648832307667,-2.193781551114273,7.609450256264014,9.648120973611533,7.312100153785119,-8.931692404002646,-4.815939371545227,-7.2403926513206684,-0.14543565368330413,-3.34334859204139,-1.8671807899101642,-7.617189365404731,5.436050083448184,-7.2419712597519865,-7.247423696814231,3.8498413285984103,9.05505229695336,-8.286857099942916,-5.884102766496446,-4.238755520745572,-2.6006493971126425,8.585547539608315,-4.524291464110142,-4.956567373936783,-2.42952493051574,2.9775029328104754,-5.709852400215331,-4.963497884712904,-8.827147563203518,3.0437082960634383,-9.220073605037797,-4.407347547068801,-1.470145975889542,-2.259031105702661,-5.3712832120433704,0.6353213559359493,-6.405936400904768,-0.8599014931393405,4.065632312450236,-8.160066489362377,0.18981436418947206,-5.597690811096539,-2.2538589287278166,2.801005601677927,-4.021820949893394,-5.324997610730881,-4.061850165556277,-2.7512974839105344,-7.55128993025221,4.490572882293932,-1.5774463451563068,-2.0639990139971895,8.19921045076877,6.315515964645373,8.014730616270553,-7.785063618105758,-2.1970100291265866,0.7347848328400104,-10.0,1.8677369393748278,6.55260464038032,-1.065897289670135,-8.968442905201266,-9.362347128932287,0.7641014336362756,4.96950396602664,5.130881865180568,3.1473932648372394,2.3876461264314086,8.381757620540855,-0.2550667009566787,2.948887370967742,0.4707992469691496,8.529609772481614,4.429951501898913,-7.074664087842711,1.9541525648292348,-9.47617972778757,2.576313442780133,-3.5544778078675066),subcontrollers=(corridor=(name=CTRNNMultilayer,robotconfigid=1,hiddennodes=3,inputs=(epuckir=(id=1)),outputs=(twowheeloutput=(id=1,maxspeed=0.1,noiseoffset=0.05)),weights=(1.3931838764842643,-0.662158666813073,-0.22055808482353467,-1.700309900372547,4.344124441923328,1.774700447827112,-3.124672431778498,-4.163406143909192,-5.04391721454275,1.180506399367846,-1.628215721803486,-7.085079020900242,-1.9259920244261264,0.7150466597208923,1.5673982919150689,3.4139319319518644,1.916857437914972,-2.4612825185605978,-3.5773908500586726,1.8102262948929364,-1.737470612855581,-5.835175168810551,-0.7690538897973358,2.4185237236260226,0.3613629442155276,-7.499579956048632,-7.868520858241885,1.5366341369291765,-7.054307713182831,3.438058023854003,-2.0479371562655113,6.227829333532279,5.52561171299704,4.083390243581929,0.8854571714904695)),leftturn=(name=CTRNNMultilayer,robotconfigid=1,hiddennodes=3,inputs=(epuckir=(id=1)),outputs=(twowheeloutput=(id=1,maxspeed=0.1,noiseoffset=0.05)),weights=(-10.0,-1.5138360633818433,4.812784658125189,0.628626298245273,-1.392739351656052,2.204949803338166,2.1893603471580056,-3.874193744951935,-0.46530733795919454,-2.8649578663501614,-1.5525313167456494,7.556059326636025,-5.395169797114264,-2.6484023405976513,-1.1802076939309494,0.6669242355774452,-3.069888261057363,-3.3721338849745037,-1.5307468013794745,0.3631097101122007,-1.9455542966920658,2.0975787003526496,0.575577939604369,0.6695254392350463,-6.175787439275344,-0.3251295273442864,-0.6866811310051718,2.8160847572859975,0.020134289446330417,-5.155047319264084,-1.4150999388009227,3.8711428295307417,-2.6706790676535976,1.7917386541869815,1.6138690292266964)),rightturn=(name=CTRNNMultilayer,robotconfigid=1,hiddennodes=3,inputs=(epuckir=(id=1)),outputs=(twowheeloutput=(id=1,maxspeed=0.1,noiseoffset=0.05)),weights=(7.338012892202027,1.597758393585973,-1.127305669248038,-8.27132465795543,0.09747153626833327,0.9361900779636118,-1.2659085769295841,-7.988743905888024,-1.0683742177353568,-7.834418744554379,-4.992942150330769,3.413000876714337,-1.5972427809544298,-3.627224837599516,-0.9805547991130701,-1.5533266711738065,-5.347466568523778,-7.488005016909013,-0.2315047641679191,-0.9736021723428493,2.5149100355504985,0.49133889519526447,-1.1020590921087776,-1.3394961235586103,-7.247604885321283,0.31827079655434387,1.2702552558727482,-6.949814305072898,-0.5866030292265878,1.8851937887093175,5.793167194195193,-7.808301513510769,-3.4468098249074512,4.792620529505539,-0.3271838483561609)))),mazesolver=(name=Behavior,type=CTRNNMultilayer,robotconfig=1,hiddennodes=10,inputs=(epuckir=(id=1),epucklight=(id=2)),outputs=(simple=(numberofoutputs=3)),weights=(-0.2505433184606599,3.941535096367384,-3.0513864955220966,-9.507409034778831,3.0153625704959692,5.208645262712128,-5.807039882608988,-9.887421870756253,2.163034551741939,7.211624361352463,3.6434964606184064,7.903929106395527,-1.3455034486309079,-1.382585934230583,9.005191278465139,5.851215327179221,-7.009861929150174,-7.46997748461848,-9.053820068465551,-0.1843338608589017,0.4183307395284871,0.37773510495563256,1.2742370785006758,10.0,-6.997156541075042,-6.063383541516718,2.363636754162827,10.0,-3.5610764070682492,2.3207127177169653,3.5746760864758707,-1.9315923431281237,-6.225960837568186,4.571197575960815,-10.0,10.0,0.1770224570597842,1.7793074834477136,0.4716026872133723,-9.732669881384949,-0.6773865238942662,5.718562982985292,7.436467238939731,-9.130885249604285,-4.4934982823178595,8.2966065019267,4.892746814957558,-7.428210458723997,-6.041680519764179,2.9979342906540936,4.418879106594531,-9.474407411856294,-10.0,2.937762960647118,-10.0,4.518969321272346,-5.827874150407942,8.734937788737405,-2.441698456702291,-10.0,7.2016499355182955,4.576355249503148,-0.43121682455629284,6.385341852914371,3.8491148418914247,-7.359698520325164,-9.816629574400498,2.2492308222643795,-0.4859509346105712,-4.183059911985497,-7.478810036999791,0.8300617172643595,2.0998299648528618,3.7923112682855424,1.822166883639719,-7.404756696968448,-3.120824836858366,-1.1235829021604615,-3.6439810223583704,-4.54162283355928,-5.109762194853648,-1.356467537455217,1.7247376052989405,-1.1977867130535587,-5.562368225743521,-9.962629945919543,-9.743580569578365,-7.3886260921296145,-0.2835364714938762,-0.1771070482168391,-5.642568252977139,-3.8015899574828538,-5.147394014521568,-2.211763369033861,-7.806628460287341,-0.5782947185230666,9.002749095935355,10.0,8.811141836533,-2.8316655093959793,3.2372630904102024,-4.412187135159652,-7.820692307322282,0.16434225720170859,5.344530767903438,-0.14751355020416426,6.326208456720717,-1.8735363273141157,-8.159729903178647,-2.8302038900062167,-5.53113011756468,3.816558124361022,10.0,-2.2306146032167797,-3.1152384429949587,8.916220081278851,-2.135687052246047,0.6721680229697251,9.016396484321726,-3.8967066705315028,-7.507489466186221,3.496464816150496,3.600238399562279,-0.8022934658909349,2.6956328518662915,-7.721992655200673,7.289895036188199,-1.8441460689932596,-5.297959423609112,-6.962471348314436,7.408701969558848,-0.46291934518044275,-5.7716385449313545,6.903069249342851,-8.467690206703702,3.1734373539055643,-1.3463347967711499,7.712973129529168,-7.605124394554907,5.752175981466745,3.069958425187658,-4.415320931432049,-2.3940460829967485,-2.337949296521847,9.639212461691793,-2.823650169092393,-2.17169167477351,-3.2515548049967307,3.500102270624252,-2.392715976241094,-6.8673868442168375,-1.3173056799782263,-5.368601099344248,-5.113129936130228,-6.0764113089127845,6.956711150356722,-0.17258500647575248,-0.948642916932215,1.5732818737925394,6.6038194487718265,-5.292259448480923,3.5335409040207666,-2.200518009856089,-3.2688021197635555,-5.825597935765702,-1.719247316338421,-0.5961180499274478,8.54865360350681,5.121987281352989,6.2210971128790575,0.7078390530895384,-0.10349351090698589,-4.969239331174703,2.727631847885355,0.8029328288146538,4.692131817866629,-0.4537736361063155,-3.6870413738442855,-6.136353244307258,4.125316364008834,-5.030182703412044,-8.895491817239543,7.189780153682421,2.1121089571209026,4.645999546967458,-1.3079086179695714,-0.8101944145933622,-4.310175889808228,-0.6159319750056268,-5.8799611324358425,7.563710835988379,-5.14957089351774,7.85889341853813,2.749515759811172,-6.5728942072653,-3.513639350140358,-4.318400602728214,1.2255720214418673,-1.2653335997965678,-8.859238435615138,2.8811237621572485,0.5730828405400206,-1.3036787628882935,-2.1688450365623084,-8.81640174276191,1.7409182211842467,-4.758742575252535,8.001701152028291,-9.791411905237496,1.774106455688799,5.776987232504233,-0.4615526382493427,1.2774744486492104),subcontrollers=(corridor=(name=CTRNNMultilayer,robotconfigid=1,hiddennodes=3,inputs=(epuckir=(id=1)),outputs=(twowheeloutput=(id=1,maxspeed=0.1,noiseoffset=0.05)),weights=(1.3931838764842643,-0.662158666813073,-0.22055808482353467,-1.700309900372547,4.344124441923328,1.774700447827112,-3.124672431778498,-4.163406143909192,-5.04391721454275,1.180506399367846,-1.628215721803486,-7.085079020900242,-1.9259920244261264,0.7150466597208923,1.5673982919150689,3.4139319319518644,1.916857437914972,-2.4612825185605978,-3.5773908500586726,1.8102262948929364,-1.737470612855581,-5.835175168810551,-0.7690538897973358,2.4185237236260226,0.3613629442155276,-7.499579956048632,-7.868520858241885,1.5366341369291765,-7.054307713182831,3.438058023854003,-2.0479371562655113,6.227829333532279,5.52561171299704,4.083390243581929,0.8854571714904695)),leftturn=(name=CTRNNMultilayer,robotconfigid=1,hiddennodes=3,inputs=(epuckir=(id=1)),outputs=(twowheeloutput=(id=1,maxspeed=0.1,noiseoffset=0.05)),weights=(-10.0,-1.5138360633818433,4.812784658125189,0.628626298245273,-1.392739351656052,2.204949803338166,2.1893603471580056,-3.874193744951935,-0.46530733795919454,-2.8649578663501614,-1.5525313167456494,7.556059326636025,-5.395169797114264,-2.6484023405976513,-1.1802076939309494,0.6669242355774452,-3.069888261057363,-3.3721338849745037,-1.5307468013794745,0.3631097101122007,-1.9455542966920658,2.0975787003526496,0.575577939604369,0.6695254392350463,-6.175787439275344,-0.3251295273442864,-0.6866811310051718,2.8160847572859975,0.020134289446330417,-5.155047319264084,-1.4150999388009227,3.8711428295307417,-2.6706790676535976,1.7917386541869815,1.6138690292266964)),rightturn=(name=CTRNNMultilayer,robotconfigid=1,hiddennodes=3,inputs=(epuckir=(id=1)),outputs=(twowheeloutput=(id=1,maxspeed=0.1,noiseoffset=0.05)),weights=(7.338012892202027,1.597758393585973,-1.127305669248038,-8.27132465795543,0.09747153626833327,0.9361900779636118,-1.2659085769295841,-7.988743905888024,-1.0683742177353568,-7.834418744554379,-4.992942150330769,3.413000876714337,-1.5972427809544298,-3.627224837599516,-0.9805547991130701,-1.5533266711738065,-5.347466568523778,-7.488005016909013,-0.2315047641679191,-0.9736021723428493,2.5149100355504985,0.49133889519526447,-1.1020590921087776,-1.3394961235586103,-7.247604885321283,0.31827079655434387,1.2702552558727482,-6.949814305072898,-0.5866030292265878,1.8851937887093175,5.793167194195193,-7.808301513510769,-3.4468098249074512,4.792620529505539,-0.3271838483561609)))),roomsolver=(name=CTRNNMultilayer,robotconfigid=1,hiddennodes=10,inputs=(epuckir=(id=1)),outputs=(twowheeloutput=(id=1,maxspeed=0.1,noiseoffset=0.05)),weights=(-5.525100954244705,-1.6893261210645187,-10.0,-9.896489687270972,-9.81085737506878,-5.603334947273111,-1.6429460859338725,-8.2722807761694,0.6826203291486785,-9.70330240228598,-6.763416597667966,-10.0,10.0,1.4016331310235872,-3.2633762884341895,-2.193564846126849,7.114735863816099,4.098631661525305,-4.946757429936727,-4.101808919906124,-6.815158997548236,-4.037138702906047,-9.021465123350751,-0.02622248656866155,-0.9477142154158973,-1.2121379852701937,6.106339777957847,0.6626816479737457,-8.160882294113318,0.7307925097867851,-0.2300323467105363,-10.0,-0.3916368063124396,-8.0624477120217,-9.88425403661044,-3.157166197375223,-7.270460388301203,-1.5611359363124442,2.9139272266677643,2.2099383918450135,1.3010620106510462,-0.7432617767346708,-5.079345210144353,-2.9074293211868123,-5.101831657760675,-9.42948161641596,2.303466929357385,-0.42641725205441783,0.24556164096261757,2.993680455189619,8.77190699120042,2.2871960748684836,4.864082128680955,-2.6405888222085845,-9.751760044772995,5.008601852865861,-0.6584707792867246,-7.41091125204077,0.9196771252377433,-2.655033679962556,-10.0,3.8045219672535424,-9.867734507648546,-1.632890091640667,-8.127174800913446,3.499101184509453,6.616103838810635,10.0,10.0,-0.18023995191744913,-0.8892418994590103,-9.611536408830789,-0.03655425957301173,2.7593317800436123,-1.3993302769300318,-7.647902449744057,-9.715112367333916,0.49310660605804824,3.6079459328398134,-2.6054951269930986,2.0157235099441926,1.0617080446351355,2.7948444888367976,-1.8830277413670218,-1.1649106219553782,3.972156779397609,-8.131581441243604,4.526344150542626,3.025346552194463,0.9441806488828242,-8.494739033831818,-1.999072465157787,2.3552931604237584,5.572977802951974,-8.485212175833666,1.2883716495165416,-6.943075778963227,1.261416163839461,-9.129589142662004,8.198589438264124,8.530118872397216,2.2561900706623175,7.07332847983903,5.2990217971772875,7.789361272129175,5.586330246883979,-5.913012097295157,-4.361132550082118,-0.8238818034020647,-6.839611315766446,1.0009262396160186,-3.5821946793978032,-2.4464233880949773,5.465262275441046,0.3041388185524867,1.3272875861917068,2.6885547087305137,-1.098814765937639,3.983967875064321,-5.216643324980139,7.450691200042177,1.8930601275938488,-1.1375440087427022,0.10893929015393677,-4.23921122010767,-2.357632768482328,0.10506713200026746,-1.7486154513210184,-4.263298475290078,-2.9694291150825247,4.744420736119903,2.1133022761013702,-8.381733504589812,-7.4388388209092335,-8.533200158047732,-0.1146123311245818,-3.4026779027082217,-3.377960988496421,3.7644098784390554,-1.9912592471906052,-1.117963111666132,-6.099490747143371,-5.419607635547252,-1.0584521359540093,1.3911091917927305,-3.9877221311565245,-4.59918548748383,-0.2834907762323215,-6.784198589305898,-7.906148215655987,-4.791579038363584,2.565742077456826,-5.412257871612924,-8.42740186256726,5.681992310572907,-5.5231562068119935,-5.545549949100598,-4.859175616668336,-7.101916408841148,1.9263784104077801,-3.2999597168977184,-5.509155508070325,-4.85796663318654,-9.30847654648609,-0.33002330753441717,10.0,3.6457363381137524,-1.9339403067853378,8.911483131610552,-3.5793522032421636,1.81906453064986,-1.989469214069249,-6.318499979374832,-3.519109741036207,-0.9286048943519303,2.2945221372813243,-1.0496364614889873,5.162201126442645,0.8030282150545522,-1.1944909406048303,1.7719167898036543,-0.33413759590941305)))";
		//String args="--evaluation +name=roommazeback,maxsteps=2000";//"--evaluation +name=roommazeback,maxsteps=2000 \n";//"\n--population +stepsperrun=450\n--environment +mazename=inversetmaze,inverse=1,numberofdifferentsamples=4,numberofmazes=1";//"--controllers +sensors=(epuckirsensor=(id=1,angle=60,numberofsensors=4,fixedsensor=1,references=1),epucklightsensor=(id=2,numbersensors=2,orientation=0,angle=45,range=0.5,fixedvalue=15))";
		
		//testFitness(dir,samples,generation,startTrial,maxTrial,fitnesssamples,(int)targetfitness,args);
		testFitnessParalleler(dir,samples,generation,startTrial,maxTrial,fitnesssamples,targetfitness,args);
		//testFitnessDetails(dir,0,8,samples,999,args);
	}
		
	private void testFitnessDetails(String dir, int fitnesssample, int trial, int samples, int generation,String args) {
		for(int i = 0 ; i < samples ; i++) {
			String conf = dir+trial+"/show_best/showbest"+generation+".conf";
			String extraArgs = "--environment +fitnesssample="+fitnesssample+"\n"+
					"--random-seed "+i+"\n"+
					"--gui name=none \n"+args;
			try{
				loadFile(conf,extraArgs);
				simRandom.setSeed(randomSeed);
				createExperimentAndEvaluationFunction();
				gui = (new GuiFactory(simulator)).getGui(guiArguments,
						experiment);
				Population population = new PopulationFactory(simulator)
						.getPopulation(populationArguments,
								experiment.getGenomeLength());
				Chromosome bestChromosome = population.getBestChromosome();
				experiment.setChromosome(bestChromosome);
				//simulator.setEnvironment(experiment.getEnvironment());
				gui.run(simulator, renderer, experiment, evaluationFunction,
						population.getNumberOfStepsPerSample());
				if (evaluationFunction != null) {
					System.out.println(trial + " " + fitnesssample + " " + i + " " + evaluationFunction.getFitness());
				}
			}catch(Exception e){e.printStackTrace();}
		}
	}
	
	private void testFitnessParalleler(String dir, int samples, int generation, int startTrial, int maxTrial, int fitnesssamples,double targetFitness, String args) {
		
		Client client = new Client(ClientPriority.HIGH, "evolve.dcti.iscte.pt", 0, "evolve.dcti.iscte.pt", 0);
		
		int tasks = 0;
		
		try {
			for(int trial = startTrial ; trial <= maxTrial ; trial++) {
				
//				if(trial==3 || trial == 6)
//					continue;
				
				String generationString = "";
				if(generation > 0)
					generationString = "--population load="+dir+trial+"/populations/population"+generation;
				
				for(int fitnesssample = 0 ; fitnesssample < fitnesssamples ; fitnesssample++) {
					String conf = dir+trial+"/_showbest_current.conf";
					String extraArgs = "--environment +fitnesssample="+fitnesssample+"\n"+
							"--gui name=none\n"+generationString+" "+args;
					
					loadFile(conf, extraArgs);
					createExperimentAndEvaluationFunction();
					Population population = new PopulationFactory(simulator)
					.getPopulation(populationArguments,
							experiment.getGenomeLength());
					
					SlaveTaskStats task = new SlaveTaskStats(trial*1000+fitnesssample, experimentArguments, environmentArguments,
							robotsArguments, controllersArguments, evaluationArguments, population.getBestChromosome(), samples,
							population.getNumberOfStepsPerSample(), targetFitness, fitnesssample) ;
					System.out.println("committing "+tasks);
					client.commit(task);
					tasks++;
				}
			}
			
			System.out.println("waiting for results");
			
			int correct[][] = new int[maxTrial-startTrial+1][fitnesssamples];
			
			for(int i = 0 ; i < tasks ; i++) {
				SlaveResult result = (SlaveResult) client.getNextResult();
				//System.out.println(result.getChromosomeId()+" "+result.getFitness());
				int trial = (int)Math.floor(result.getChromosomeId()/1000.0);
				int fitnesssample = result.getChromosomeId()-trial*1000;
				correct[trial-startTrial][fitnesssample] = (int)result.getFitness();
			}
			
			System.out.println("###done");
			
			for(int i = 0 ; i < correct.length ; i++) {
				System.out.print((i+startTrial)+" ");
				for(int j = 0 ; j < correct[i].length ; j++) {
					System.out.print(correct[i][j]+" ");
				}
				System.out.println();
			}
			
			System.exit(0);
			
		}catch(Exception e) {e.printStackTrace();}
	}
	
	private void testFitness(String dir, int samples, int generation, int startTrial, int maxTrial, int fitnesssamples,int targetFitness, String args) {
		
		for(int trial = startTrial ; trial <= maxTrial ; trial++) {
			
			String generationString = "";
			if(generation > 0)
				generationString = "--population load="+dir+trial+"/populations/population"+generation+" "+args;
			
			int correct[] = new int[fitnesssamples];
			int wall[] = new int[fitnesssamples];
			double fitness = 0;
			for(int fitnesssample = 0 ; fitnesssample < fitnesssamples ; fitnesssample++) {
				for(int i = 0 ; i < samples ; i++) {
					String conf = dir+trial+"/_showbest_current.conf";
					String extraArgs = "--environment +fitnesssample="+fitnesssample+"\n"+
							"--random-seed "+i+"\n"+
							"--gui name=none\n"+generationString;
					try{
						loadFile(conf,extraArgs);
						simRandom.setSeed(randomSeed);
						createExperimentAndEvaluationFunction();
						gui = (new GuiFactory(simulator)).getGui(guiArguments,
								experiment);
						Population population = new PopulationFactory(simulator)
								.getPopulation(populationArguments,
										experiment.getGenomeLength());
						Chromosome bestChromosome = population.getBestChromosome();
						experiment.setChromosome(bestChromosome);
						// simulator.setEnvironment(experiment.getEnvironment());
						gui.run(simulator, renderer, experiment, evaluationFunction,
								population.getNumberOfStepsPerSample());
						if (evaluationFunction != null) {
							fitness+=evaluationFunction.getFitness();
							if(evaluationFunction.getFitness() >= targetFitness)
								correct[fitnesssample]++;
							
							if(evaluationFunction.getClass().equals(TMazeEvaluationFunction.class))
								wall[fitnesssample]+=((TMazeEvaluationFunction)evaluationFunction).touchedWall() ? 1 : 0;
							
						}
					}catch(Exception e){e.printStackTrace();}
				}
			}
			System.out.print(trial);
			for(int i = 0 ; i < fitnesssamples ; i++)
				//System.out.print(" "+correct[i]+" ("+wall[0]+")");
				System.out.print(" "+correct[i]+" ");
			
			System.out.println(fitness/(fitnesssamples*samples));
		}
	}
	
	private void compareBest(String dir, int[] distances) {
		
		Population p;
		int i = 0;
		
		ArrayList<double[]> bestAlleles = new ArrayList<double[]>();
		
		while((p = readPopulation(dir+i)) != null) {
			bestAlleles.add(p.getBestChromosome().getAlleles());
			i++;
		}
		
		plotDataSets(compareAlleles(bestAlleles, distances));
	}
	
	private void compareCentroids(String dir, int[] distances) {
		
		Population p;
		int i = 0;
		
		ArrayList<double[]> allCentroids = new ArrayList<double[]>();
		
		while((p = readPopulation(dir+i)) != null) {
			allCentroids.add(calculateCentroid(p));
			i++;
		}
		plotDataSets(compareAlleles(allCentroids, distances));
	}
	
	private DataSetPlot[] compareAlleles(ArrayList<double[]> allAlleles, int[] distances) {
		
		double[][] allDistances = new double[distances.length][allAlleles.size()];
		
		for(int i = 0 ; i < allAlleles.size() ; i++) {
			for(int j = 0 ; j < distances.length ; j++) {
				if(i - distances[j] > 0)
					allDistances[j][i] = euclideanDistance(allAlleles.get(i), allAlleles.get(i-distances[j]))/(double)allAlleles.get(i).length;
			}
		}
		
		DataSetPlot[] dataSets = new DataSetPlot[distances.length];
		
		for(int i = 0 ; i < distances.length; i++)
			dataSets[i] = getDataSetPlot(allDistances[i], "euclidean distance "+distances[i]);
		
		return dataSets;
	}
	
	private double[] calculateCentroid(Population p) {
		
		int populationSize = p.getPopulationSize();
		Chromosome[] chromosomes = p.getTopChromosome(populationSize);
		int chromosomeLength = chromosomes[0].getAlleles().length;
		
		double[] centroid = new double[chromosomeLength];
		
		for(int j = 0 ; j < populationSize ; j++) {
			double[] alleles = chromosomes[j].getAlleles();
			
			for(int z = 0 ; z < alleles.length ; z++) {
				centroid[z]+=alleles[z];
			}
		}
		
		for(int j = 0 ; j < chromosomeLength ; j++)
			centroid[j]/=(double)populationSize;
		
		return centroid;
	}
	
	private void plotBestAndCentroid(String dir, int generation) {
		Population p = readPopulation(dir+generation);
		
		double[] centroid = calculateCentroid(p);
		double[] alleles = p.getBestChromosome().getAlleles();
		
		plotDataSets(new DataSetPlot[]{getDataSetPlot(centroid, "centroid "+generation),getDataSetPlot(alleles,"best "+generation)});
	}
	
	private void plotGenomes(String dir, int[] generations, boolean centroid) {
		
		DataSetPlot[] plots = new DataSetPlot[generations.length];
	
		for(int i = 0 ; i < generations.length ; i++) {
			population = readPopulation(dir+generations[i]);
			if(!centroid) {
				Chromosome c = population.getBestChromosome();
				plots[i] = getDataSetPlot(c.getAlleles(), generations[i]+" best "+c.getFitness());
			}else
				plots[i] = getDataSetPlot(calculateCentroid(population), generations[i]+" centroid");
		}
		
		plotDataSets(plots);
	}
	
	private void plotDataSets(DataSetPlot[] plots) {
		JavaPlot javaPlot = new JavaPlot();
		
		PlotStyle myPlotStyle = new PlotStyle();
		myPlotStyle.setStyle(Style.LINES);
		myPlotStyle.setLineWidth(1);
		
		for(DataSetPlot p : plots) {
			p.setPlotStyle(myPlotStyle);
			javaPlot.addPlot(p);
		}
		
		javaPlot.plot();
	}
	
	private double euclideanDistance(double[] first, double[] second) {
		
		double sumOfSquares = 0;
		
		for(int i = 0 ; i < first.length ; i++) {
			double sum = first[i]-second[i];
			sumOfSquares+=Math.pow(sum, 2);
		}
		
		return Math.sqrt(sumOfSquares);
	}
	
	private Population readPopulation(String filename) {
		try {
			FileInputStream fis = new FileInputStream(new File(filename));
			GZIPInputStream gzipIn = new GZIPInputStream(fis);
			ObjectInputStream in = new ObjectInputStream(gzipIn);
			Population p = (Population)in.readObject();
			in.close();
			return p;
		} catch(Exception e) {
			return null;
		}
	}
	
	private DataSetPlot getDataSetPlot(double[] data, String name) {
		double[][] results = new double[data.length][2];
		
		for(int i = 0 ; i < data.length ; i++){
			results[i][0] = i;
			results[i][1] = data[i];
		}
		
		DataSetPlot s = new DataSetPlot(results);
		s.setTitle(name);
		return s;
	}
	
	public static void main(String[] args) {
		new StatsMain(args);
	}

}
