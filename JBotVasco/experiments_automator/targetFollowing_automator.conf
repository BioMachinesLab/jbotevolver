%runs:10
%maxevolutions:5

--robots
 	classname=simulation.robot.AquaticDrone,
	rudder=1,
	distancewheels=0.2,
	enableRandomizenumber=1,
	numberofrobots=2,
	randomizenumber=(3,4,5),
	radius=0.5,
	diameter=1,
	maxspeed=0.3,
	commrange=40,
	gpserror=1.8,
	compassoffset=0,
	compasserror=10,
	headingoffset=0.05,
	speedoffset=0.1,
	avoiddrones=0,
	sensors=(
		CISensorWrapper_1=(
			classname=simulation.robot.CISensorWrapper,
			ci=(
				classname=commoninterface.sensors.TargetComboCISensor,
				id=1,
				range=40,
				distanceToCommute=2.5,
			),
			id=1
		),
		CISensorWrapper_2=(
			classname=simulation.robot.CISensorWrapper,
			ci=(
				classname=commoninterface.sensors.DroneCISensor,
				id=2,
				range=40,
				numbersensors=4
			),
			id=2
		)
	)
	
--controllers
	network=(
		classname=commoninterface.neuralnetwork.CINEATNetwork,
		inputs=(
			TargetLocation=(
				classname=commoninterface.neuralnetwork.inputs.GenericCINNInput,
				label=TargetLocation,
				id=1
			),
			Drone=(
				classname=commoninterface.neuralnetwork.inputs.GenericCINNInput,
				label=DroneSensor,
				id=2
			)
        ),
		outputs=(
			Rudder=(
				classname=commoninterface.neuralnetwork.outputs.RudderCINNOutput,
				label=Rudder,
				forwardonly=1,
				bottomLimit=0,
				id=1
			)
		)
	)
	

--simulator network=(classname=network.SimulationNetwork)
--executor classname=taskexecutor.ConillonTaskExecutor
--evolution 
	classname=evolutionaryrobotics.evolution.NEATEvolution,
	task=(
		classname=taskexecutor.tasks.TargetGenerationalTask
	),
	halfhalfFaults=0

--evaluation
 	classname=evolutionaryrobotics.evaluationfunctions.KeepPositionInTargetEvaluationFunction,
	safetyFactorEnable=0,
	safetyDistance=3,
	safetyFactorValue=0.5,
	killOnCollision=0,
	
	energyFactorEnable=0,
	orientationFactorEnable=1,
	distanceBootstrapFactorEnable=0,
	inTargetRadius=1

--environment
 	classname=environment.target.FormationMultiTargetEnvironment,
 	
	width=75,
	height=75,
	steps=2000,

	radiusOfObjectPositioning=15,
	onePerOneRobotTarget=1,
	variateTargetsQnt=0,
	targetRadius=1.5,
	safetyRandomPositionDistance=3.5,
	faultDuration=500,
	injectFaults=0,

	formationShape=mix,
	lineFormation_xDelta=6.0,
	arrowFormation_xDelta=6.0,
	arrowFormation_yDelta=6.0,
	circleFormation_radius=10,
	variateFormationParameters=0,

	moveTarget=1,
	targetMovementVelocity=0.2,
	variateTargetsSpeed=1,
	targetMovementAzimuth=0,
	variateTargetsAzimuth=1,
	
	rotateFormation=1,
	rotationVelocity=0.015,
	rotationDirection=0,
	variateRotationVelocity=1,
	variateRotationDirection=1
	
--updatables 
	currents=(
		classname=updatables.WaterCurrent,
		maxspeed=0.1
	)
		
%pop{
	--population
 		classname=evolutionaryrobotics.populations.NEATPopulation,
		samples=1,
		generations=400,
		size=150
}

#targetFollowing_basicSetup_normal_correctedErrors{
        %pop
        --controllers +classname=controllers.DroneNeuralNetworkController
        --postevaluation +dir=./targetFollowing_automator/targetFollowing_basicSetup_normal_correctedErrors/
      	--environment +formationShape=mix
}

#targetFollowing_basicSetup_hybrid_correctedErrors{
        %pop
        --population +generations=250
        --controllers +classname=controllers.TargetFollowingHibridController
        --postevaluation +dir=./targetFollowing_automator/targetFollowing_basicSetup_hybrid_correctedErrors/
        --environment +formationShape=mix
}

--postevaluation
	samples=6,
	targetfitness=0,
	singleEvaluation=0,
	sampleincrement=1,
	steps=4000,
	showOutput=1,
	saveOutput=1,
	localevaluation=0,
	collectMetrics=1