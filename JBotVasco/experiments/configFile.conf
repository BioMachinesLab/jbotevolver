
#--output ./experiments/rendition_DEBUG_double_orientation_proportional_newSensor_noise

--robots
 	classname=simulation.robot.AquaticDrone,
	rudder=1,
	distancewheels=0.2,
	enableRandomizenumber=0,
	numberofrobots=2,
	randomizenumber=(3,4,5),
	radius=0.5,
	diameter=1,
	maxspeed=0.3,
	commrange=40,
	compassoffset=0,
	gpserror=1.8,
	#gpserror=0.0,
	compasserror=10,
	#compasserror=0.0,
	headingoffset=0.05,
	#headingoffset=0.0,
	speedoffset=0.1,
	#speedoffset=0.0,
	avoiddrones=0,
	sensors=(
		# Closest target sensors
		CISensorWrapper_1=(
			classname=simulation.robot.CISensorWrapper,
			ci=(
				classname=commoninterface.sensors.InfiniteTargetCISensor,
				id=1,
				linear=1,
				normalize=1,
				range=40
			),
			id=1
		),
		CISensorWrapper_2=(
			classname=simulation.robot.CISensorWrapper,
			ci=(
				classname=commoninterface.sensors.TargetMotionCISensor,
				id=2,
				range=40
			),
			id=2
		#),
		# Other sensors
		#CISensorWrapper_3=(
		#	classname=simulation.robot.CISensorWrapper,
		#	ci=(
		#		classname=commoninterface.sensors.DroneCISensor,
		#		id=3,
		#		range=40,
		#		numbersensors=4
		#	),
		#	id=3
		)
	)

--controllers
 	classname=controllers.DroneNeuralNetworkController,
	network=(
		classname=commoninterface.neuralnetwork.CINEATNetwork,
		inputs=(
			# Closest target sensors
			TargetLocation=(
				classname=commoninterface.neuralnetwork.inputs.GenericCINNInput,
				label=TargetLocation,
				id=1
			),
			TargetMotion=(
				classname=commoninterface.neuralnetwork.inputs.GenericCINNInput,
				label=TargetMotion,
				id=2
			#),
			# Other sensors
			#Drone=(
			#	classname=commoninterface.neuralnetwork.inputs.GenericCINNInput,
			#	label=DroneSensor,
			#	id=3
			)
        ),
		outputs=(
			Rudder=(
				classname=commoninterface.neuralnetwork.outputs.RudderCINNOutput,
				label=Rudder,
				forwardonly=1,
				id=1
			)
		)
	)

--population
 	classname=evolutionaryrobotics.populations.NEATPopulation,
	samples=1,
	generations=200,
	size=150
--environment
 	classname=environment.target.FormationMultiTargetEnvironment,
 	
	width=75,
	height=75,
	steps=2000,

	radiusOfObjectPositioning=15,
	onePerOneRobotTarget=1,
	variateTargetsQnt=0,
	targetRadius=1.5,
	safetyRandomPositionDistance=3.5,
	faultDuration=500,
	injectFaults=0,

	formationShape=random,
	lineFormation_xDelta=6.0,
	arrowFormation_xDelta=6.0,
	arrowFormation_yDelta=6.0,
	circleFormation_radius=10,
	variateFormationParameters=0,

	moveTarget=1,
	targetMovementVelocity=0.2,
	#variateTargetsSpeed=1,
	variateTargetsSpeed=0,
	targetMovementAzimuth=0,
	variateTargetsAzimuth=1,
	
	rotateFormation=1,
	rotationVelocity=0.015,
	rotationDirection=0,
	#variateRotationVelocity=1,
	variateRotationVelocity=0,
	variateRotationDirection=1

#--updatables 
#	currents=(
#		classname=updatables.WaterCurrent,
#		maxspeed=0.1
#	)

--executor 
	classname=taskexecutor.ConillonTaskExecutor
	#classname=taskexecutor.ParallelTaskExecutor
	#classname=taskexecutor.SequentialTaskExecutor

--evolution 
	classname=evolutionaryrobotics.evolution.NEATEvolution,
	task=(
		classname=taskexecutor.tasks.TargetGenerationalTask
	),
	halfhalfFaults=0

--evaluation
 	classname=evolutionaryrobotics.evaluationfunctions.KeepPositionInTargetEvaluationFunction,
	safetyFactorEnable=0,
	safetyDistance=3,
	safetyFactorValue=0.5,
	killOnCollision=0,
	
	energyFactorEnable=0,
	orientationFactorEnable=1,
	distanceBootstrapFactorEnable=0

--simulator 
	network=(
		classname=network.SimulationNetwork
	)
	
--random-seed 1
